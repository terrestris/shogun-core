<?xml version="1.0" encoding="UTF-8"?>
<project
    xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <groupId>${groupId}</groupId>
    <artifactId>${artifactId}</artifactId>
    <version>${version}</version>
    <packaging>war</packaging>

    <name>${webapp-name}</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <shogun.version>2.1.1-SNAPSHOT</shogun.version>

        <maven-javadoc-plugin.version>2.10.3</maven-javadoc-plugin.version>
        <maven-compiler-plugin.version>3.5.1</maven-compiler-plugin.version>
        <maven-eclipse-plugin.version>2.10</maven-eclipse-plugin.version>
        <maven-scm-plugin.version>1.9.4</maven-scm-plugin.version>

        <downloadSources>true</downloadSources>
        <downloadJavadocs>false</downloadJavadocs>
    </properties>

    <profiles>
        <!-- A profile for JDK 1.8 (and later) -->
        <profile>
            <id>jdk8</id>
            <activation>
                <jdk>[1.8,)</jdk>
            </activation>
            <properties>
                <jdk.version>1.8</jdk.version>
                <!-- Make Javadocs work in 1.8. Credits go to http://stackoverflow.com/a/26806103 -->
                <javadoc.opts>-Xdoclint:none</javadoc.opts>
                <jetty-maven-plugin.version>9.4.8.v20171121</jetty-maven-plugin.version>
            </properties>
        </profile>
    </profiles>

    <build>
        <plugins>

            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>${jetty-maven-plugin.version}</version>
                <configuration>
                    <httpConnector>
                        <!-- The port number for the connector to listen on -->
                        <port>8081</port>
                        <!-- The timeout in milliseconds -->
                        <idleTimeout>30000</idleTimeout>
                    </httpConnector>
                    <!-- The pause in seconds between sweeps of the webapp
                         to check for changes and automatically hot redeploy
                         if any are detected -->
                    <scanIntervalSeconds>5</scanIntervalSeconds>
                    <webAppConfig>
                        <!-- Terminate the server on any startup exception -->
                        <throwUnavailableOnStartupException>true</throwUnavailableOnStartupException>
                    </webAppConfig>
                </configuration>
                <executions>
                    <!-- Run the server on mvn:test -->
                    <execution>
                        <id>start-jetty</id>
                        <phase>test</phase>
                        <goals>
                            <goal>start</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <source>${jdk.version}</source>
                    <target>${jdk.version}</target>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>${maven-eclipse-plugin.version}</version>
                <configuration>
                    <wtpversion>2.0</wtpversion>
                    <wtpmanifest>true</wtpmanifest>
                    <!-- If useProjectReferences is true, it is very likely
                        that you get problems when using a webapplication server like tomcat in Eclipse,
                        because the WTP mechanism does not work as expected in some points. For example
                        the resources in src/test/resources would also be scanned, e.g. for spring-context
                        configurations, although these resources should be independent from the tested
                        sources. -->
                    <useProjectReferences>false</useProjectReferences>
                    <downloadSources>${downloadSources}</downloadSources>
                    <downloadJavadocs>${downloadJavadocs}</downloadJavadocs>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>${maven-javadoc-plugin.version}</version>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <configuration>
                            <additionalparam>${javadoc.opts}</additionalparam>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Checkout/clone the shoguncore client to this application. For
                checkout just run mvn scm:checkout in your app directory -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-scm-plugin</artifactId>
                <version>${maven-scm-plugin.version}</version>
                <configuration>
                    <!-- The directory to checkout the sources to for the
                        bootstrap and checkout goals -->
                    <checkoutDirectory>${project.basedir}/src/main/webapp/client</checkoutDirectory>
                    <!-- The type of connection to use (connection or developerConnection) -->
                    <connectionType>developerConnection</connectionType>
                    <!-- The base repository -->
                    <connectionUrl>scm:git:https://github.com/terrestris/shogun2-client.git</connectionUrl>
                    <!-- IMPORTANT: Set your git username here! (Assuming
                        you have fork already) -->
                    <developerConnectionUrl>scm:git:https://github.com/{{USERNAME}}/shogun2-client.git</developerConnectionUrl>
                </configuration>
            </plugin>

        </plugins>

        <!-- Include maven variables (name, version, etc. from pom.xml) in the env.properties file -->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>META-INF/**</include>
                </includes>
            </resource>
        </resources>

    </build>

    <dependencies>

        <dependency>
            <groupId>de.terrestris</groupId>
            <artifactId>shogun-core</artifactId>
            <version>${shogun.version}</version>
        </dependency>

    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>javax.servlet-api</artifactId>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.tomcat</groupId>
                <artifactId>tomcat-servlet-api</artifactId>
                <scope>provided</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

</project>
